parameters:
	polluteScopeWithLoopInitialAssignments: false
	checkAlwaysTrueCheckTypeFunctionCall: true
	checkAlwaysTrueInstanceof: true
	checkAlwaysTrueStrictComparison: true
	checkFunctionNameCase: true
	ignoreErrors:
		# See https://github.com/phpstan/phpstan/issues/1306
		- '#Variable \$bufferIsSpecialScheme might not be defined\.#'

		# See https://github.com/phpstan/phpstan/issues/1060
		- '#Argument of an invalid type object supplied for foreach, only iterables are supported\.#'

		# See https://github.com/phpstan/phpstan/issues/1311
		- '#Property Rowbot\\URL\\QueryList::\$list \(array<int, array<string, string>>\) does not accept array<int, array<int, array<string, string>\|int>>\.#'

		# See https://github.com/phpstan/phpstan/issues/1215
		- '#Strict comparison using === between string and false will always evaluate to false\.#'

		# See https://github.com/phpstan/phpstan/issues/1254
		- '#Result of && is always false\.#'
		- '#Strict comparison using !== between null and null will always evaluate to false\.#'

		# This is an unfortunate circumstance. PHPStan can't tell that we only enter some functions in the
		# BasicURLParser based on the condition that the base URL will be non-null. I should consider null checking in
		# those cases just so that we don't miss a valid case of this occuring.
		- '#Cannot access property \$[a-z]+ on Rowbot\\URL\\URLRecord\|null\.#'

		# I plan to handle this at a later date. Though, this should only happen if someone tries to json encode a URL
		# object that failed to parse its input.
		- '#Method Rowbot\\URL\\URL::toJSON\(\) should return string but returns string\|false\.#'
